{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { GlobalConstants } from 'src/app/shared/global-constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/service/category.service\";\nimport * as i3 from \"@angular/material/dialog\";\nimport * as i4 from \"src/app/service/snackbar.service\";\nimport * as i5 from \"@angular/material/toolbar\";\nimport * as i6 from \"@angular/flex-layout/flex\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"@angular/material/icon\";\nimport * as i9 from \"@angular/material/form-field\";\nimport * as i10 from \"@angular/material/input\";\nimport * as i11 from \"@angular/common\";\nfunction CategoryComponent_mat_error_16_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"This field is mandatory.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CategoryComponent_mat_error_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtemplate(1, CategoryComponent_mat_error_16_span_1_Template, 2, 0, \"span\", 10);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.categoryForm.controls.name.errors.required);\n  }\n}\nexport let CategoryComponent = /*#__PURE__*/(() => {\n  class CategoryComponent {\n    constructor(dialogData, forBuilder, categoyService, dialogRef, snackBarService) {\n      this.dialogData = dialogData;\n      this.forBuilder = forBuilder;\n      this.categoyService = categoyService;\n      this.dialogRef = dialogRef;\n      this.snackBarService = snackBarService;\n      this.onAddCategory = new EventEmitter();\n      this.onEditCategory = new EventEmitter();\n      this.categoryForm = FormGroup;\n      this.dialogAction = \"Add\";\n      this.acttion = \"Add\";\n    }\n    ngOnInit() {\n      this.categoryForm = this.forBuilder.group({\n        name: [null, [Validators.required]]\n      });\n      if (this.dialogData.action === 'Edit') {\n        this.dialogAction = \"Edit\";\n        this.acttion = \"Update\";\n        this.categoryForm.patchValue(this.dialogData.data);\n      }\n    }\n    handleSubmit() {\n      if (this.dialogAction === \"Edit\") {\n        this.edit();\n      } else {\n        this.add();\n      }\n    }\n    add() {\n      var formData = this.categoryForm.value;\n      var data = {\n        name: formData.name\n      };\n      this.categoyService.add(data).subscribe(response => {\n        this.dialogRef.close();\n        this.onAddCategory.emit();\n        this.responseMessage = response.message;\n        this.snackBarService.openSnackBar(this.responseMessage, \"success\");\n      }, error => {\n        var _a, _b;\n        this.dialogRef.close();\n        console.log(error);\n        if ((_a = error.error) === null || _a === void 0 ? void 0 : _a.message) {\n          this.responseMessage = (_b = error.error) === null || _b === void 0 ? void 0 : _b.message;\n        } else {\n          this.responseMessage = GlobalConstants.genericError;\n        }\n        this.snackBarService.openSnackBar(this.responseMessage, GlobalConstants.error);\n      });\n    }\n    edit() {\n      var formData = this.categoryForm.value;\n      var data = {\n        id: this.dialogData.data.id,\n        name: formData.name\n      };\n      this.categoyService.update(data).subscribe(response => {\n        this.dialogRef.close();\n        this.onAddCategory.emit();\n        this.responseMessage = response.message;\n        this.snackBarService.openSnackBar(this.responseMessage, \"success\");\n      }, error => {\n        var _a, _b;\n        this.dialogRef.close();\n        console.log(error);\n        if ((_a = error.error) === null || _a === void 0 ? void 0 : _a.message) {\n          this.responseMessage = (_b = error.error) === null || _b === void 0 ? void 0 : _b.message;\n        } else {\n          this.responseMessage = GlobalConstants.genericError;\n        }\n        this.snackBarService.openSnackBar(this.responseMessage, GlobalConstants.error);\n      });\n    }\n  }\n  CategoryComponent.ɵfac = function CategoryComponent_Factory(t) {\n    return new (t || CategoryComponent)(i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.CategoryService), i0.ɵɵdirectiveInject(i3.MatDialogRef), i0.ɵɵdirectiveInject(i4.SnackbarService));\n  };\n  CategoryComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CategoryComponent,\n    selectors: [[\"app-category\"]],\n    decls: 26,\n    vars: 5,\n    consts: [[\"color\", \"primary\"], [\"fxLayout\", \"row\"], [1, \"spacer\"], [\"mat-icon-button\", \"\", \"mat-dialog-close\", \"\", 1, \"mat-dialog-close\"], [1, \"mat-typography\"], [3, \"formGroup\"], [\"fxFlex\", \"\", \"fxLayout\", \"column\"], [\"fxLayout\", \"row wrap\"], [\"appearance\", \"standard\", \"fxFlex\", \"\"], [\"matInput\", \"\", \"formControlName\", \"name\", \"required\", \"\"], [4, \"ngIf\"], [\"align\", \"end\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\", \"click\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", \"mat-dialog-close\", \"\"]],\n    template: function CategoryComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-toolbar\", 0)(1, \"mat-toolbar-row\", 1)(2, \"span\");\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"span\", 2);\n        i0.ɵɵelementStart(5, \"button\", 3)(6, \"mat-icon\");\n        i0.ɵɵtext(7, \"close\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(8, \"mat-dialog-content\", 4)(9, \"form\", 5)(10, \"div\", 6)(11, \"div\", 7)(12, \"mat-form-field\", 8)(13, \"mat-label\");\n        i0.ɵɵtext(14, \" Name \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"input\", 9);\n        i0.ɵɵtemplate(16, CategoryComponent_mat_error_16_Template, 2, 1, \"mat-error\", 10);\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(17, \"mat-dialog-actions\", 11)(18, \"button\", 12);\n        i0.ɵɵlistener(\"click\", function CategoryComponent_Template_button_click_18_listener() {\n          return ctx.handleSubmit();\n        });\n        i0.ɵɵelementStart(19, \"mat-icon\");\n        i0.ɵɵtext(20, \"save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(21);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"button\", 13)(23, \"mat-icon\");\n        i0.ɵɵtext(24, \"cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(25, \" Close \");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"\", ctx.dialogData.action, \" Category\");\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"formGroup\", ctx.categoryForm);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", ctx.categoryForm.controls.name.touched && ctx.categoryForm.controls.name.invalid);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", !(ctx.categoryForm.valid && ctx.categoryForm.dirty));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", ctx.acttion, \" \");\n      }\n    },\n    directives: [i5.MatToolbar, i5.MatToolbarRow, i6.DefaultLayoutDirective, i7.MatButton, i3.MatDialogClose, i8.MatIcon, i3.MatDialogContent, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i6.DefaultFlexDirective, i9.MatFormField, i9.MatLabel, i10.MatInput, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i1.RequiredValidator, i11.NgIf, i9.MatError, i3.MatDialogActions],\n    styles: [\"\"]\n  });\n  return CategoryComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}